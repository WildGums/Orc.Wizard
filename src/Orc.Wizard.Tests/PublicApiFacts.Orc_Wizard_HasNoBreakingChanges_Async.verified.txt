[assembly: System.Resources.NeutralResourcesLanguage("en-US")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v8.0", FrameworkDisplayName=".NET 8.0")]
[assembly: System.Windows.Markup.XmlnsDefinition("http://schemas.wildgums.com/orc/wizard", "Orc.Wizard")]
[assembly: System.Windows.Markup.XmlnsDefinition("http://schemas.wildgums.com/orc/wizard", "Orc.Wizard.Controls")]
[assembly: System.Windows.Markup.XmlnsDefinition("http://schemas.wildgums.com/orc/wizard", "Orc.Wizard.Converters")]
[assembly: System.Windows.Markup.XmlnsDefinition("http://schemas.wildgums.com/orc/wizard", "Orc.Wizard.Views")]
[assembly: System.Windows.Markup.XmlnsPrefix("http://schemas.wildgums.com/orc/wizard", "orcwizard")]
[assembly: System.Windows.ThemeInfo(System.Windows.ResourceDictionaryLocation.None, System.Windows.ResourceDictionaryLocation.SourceAssembly)]
namespace Orc.Wizard.Automation
{
    public class BreadcrumbItem : Orc.Automation.Controls.FrameworkElement<Orc.Wizard.Automation.BreadcrumbItemModel, Orc.Wizard.Automation.BreadcrumbItemMap>
    {
        public BreadcrumbItem(System.Windows.Automation.AutomationElement element) { }
        public string? EllipseText { get; }
        public string? Title { get; }
    }
    public class BreadcrumbItemMap : Orc.Automation.AutomationBase
    {
        public BreadcrumbItemMap(System.Windows.Automation.AutomationElement element) { }
        public Orc.Automation.Controls.Text? EllipseText { get; }
        public Orc.Automation.Controls.Text? TitleText { get; }
    }
    [Orc.Automation.ActiveAutomationModel]
    public class BreadcrumbItemModel : Orc.Automation.ControlModel
    {
        public static readonly Catel.Data.IPropertyData? CurrentPageProperty;
        public static readonly Catel.Data.IPropertyData? DescriptionProperty;
        public static readonly Catel.Data.IPropertyData? NumberProperty;
        public static readonly Catel.Data.IPropertyData? PageProperty;
        public static readonly Catel.Data.IPropertyData? TitleProperty;
        public BreadcrumbItemModel(Orc.Automation.AutomationElementAccessor accessor) { }
        public Orc.Wizard.IWizardPage? CurrentPage { get; set; }
        public string? Description { get; set; }
        public int Number { get; set; }
        public Orc.Wizard.IWizardPage? Page { get; set; }
        public string? Title { get; set; }
    }
    public class BreadcrumbItemPeer : Orc.Automation.AutomationControlPeerBase<Orc.Wizard.Controls.BreadcrumbItem>
    {
        public BreadcrumbItemPeer(Orc.Wizard.Controls.BreadcrumbItem owner) { }
    }
    [Orc.Automation.AutomatedControl(Class=typeof(Orc.Wizard.Views.WizardWindow))]
    public class WizardWindow : Orc.Automation.Controls.Window<Orc.Automation.WindowModel, Orc.Wizard.Automation.WizardWindowMap>
    {
        public WizardWindow(System.Windows.Automation.AutomationElement element) { }
    }
    public class WizardWindowMap : Orc.Automation.AutomationBase
    {
        public WizardWindowMap(System.Windows.Automation.AutomationElement element) { }
        public Orc.Automation.Controls.List? BreadCrumbList { get; }
    }
    public class WizardWindowPeer : Orc.Automation.AutomationWindowPeerBase<Orc.Wizard.Views.WizardWindow>
    {
        public WizardWindowPeer(Orc.Wizard.Views.WizardWindow owner) { }
    }
}
namespace Orc.Wizard.Controls
{
    public sealed class BreadcrumbItem : System.Windows.Controls.UserControl, System.Windows.Markup.IComponentConnector
    {
        public static readonly System.Windows.DependencyProperty CurrentPageProperty;
        public static readonly System.Windows.DependencyProperty DescriptionProperty;
        public static readonly System.Windows.DependencyProperty NumberProperty;
        public static readonly System.Windows.DependencyProperty PageProperty;
        public static readonly System.Windows.DependencyProperty TitleProperty;
        public BreadcrumbItem() { }
        public Orc.Wizard.IWizardPage? CurrentPage { get; set; }
        public string? Description { get; set; }
        public int Number { get; set; }
        public Orc.Wizard.IWizardPage? Page { get; set; }
        public string? Title { get; set; }
        public void InitializeComponent() { }
        protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { }
    }
    public class SideNavigationBreadcrumbItem : System.Windows.Controls.UserControl, System.Windows.Markup.IComponentConnector
    {
        public const double EllipseDiameter = 26D;
        public const int NavigationGridYMargin = 5;
        public const int NavigationItemBottomMarginDefault = 56;
        public const int NavigationItemLineLengthDefault = 48;
        public const int NavigationItemLineTopDefault = 35;
        public static readonly System.Windows.Thickness CanvasLineMargin;
        public static readonly System.Windows.DependencyProperty CurrentPageProperty;
        public static readonly System.Windows.DependencyProperty DescriptionProperty;
        public static readonly System.Windows.Thickness EllipseMargin;
        public static readonly System.Windows.DependencyProperty NavigationItemLineLengthProperty;
        public static readonly System.Windows.DependencyProperty NavigationItemLineTopProperty;
        public static readonly System.Windows.Thickness NavigationItemMarginDefault;
        public static readonly System.Windows.DependencyProperty NavigationItemMarginProperty;
        public static readonly System.Windows.DependencyProperty NumberProperty;
        public static readonly System.Windows.DependencyProperty PageProperty;
        public static readonly System.Windows.DependencyProperty TitleProperty;
        public SideNavigationBreadcrumbItem() { }
        public Orc.Wizard.IWizardPage? CurrentPage { get; set; }
        public string? Description { get; set; }
        public int NavigationItemLineLength { get; set; }
        public int NavigationItemLineTop { get; set; }
        public System.Windows.Thickness NavigationItemMargin { get; set; }
        public int Number { get; set; }
        public Orc.Wizard.IWizardPage? Page { get; set; }
        public string? Title { get; set; }
        public void InitializeComponent() { }
    }
    public class WizardPageHeader : System.Windows.Controls.UserControl, System.Windows.Markup.IComponentConnector
    {
        public static readonly System.Windows.DependencyProperty DescriptionProperty;
        public static readonly System.Windows.DependencyProperty TextAlignmentProperty;
        public static readonly System.Windows.DependencyProperty TitleProperty;
        public WizardPageHeader() { }
        public string? Description { get; set; }
        public System.Windows.TextAlignment TextAlignment { get; set; }
        public string? Title { get; set; }
        public void InitializeComponent() { }
    }
}
namespace Orc.Wizard.Converters
{
    public class BreadcrumbTitleConverter : Catel.MVVM.Converters.ValueConverterBase<Orc.Wizard.IWizardPage>
    {
        public BreadcrumbTitleConverter() { }
        protected override object? Convert(Orc.Wizard.IWizardPage? value, System.Type targetType, object? parameter) { }
    }
    public class IsSelectedToBrushConverter : Catel.MVVM.Converters.ValueConverterBase<bool>
    {
        public IsSelectedToBrushConverter() { }
        protected override object? Convert(bool value, System.Type targetType, object? parameter) { }
    }
    public class IsSelectedToForegroundBrushConverter : Catel.MVVM.Converters.ValueConverterBase<bool>
    {
        public IsSelectedToForegroundBrushConverter() { }
        protected override object? Convert(bool value, System.Type targetType, object? parameter) { }
    }
    public class WizardPageToIsSelectedConverter : Catel.MVVM.Converters.ValueConverterBase<Orc.Wizard.IWizardPage>
    {
        public WizardPageToIsSelectedConverter() { }
        protected override object? Convert(Orc.Wizard.IWizardPage? value, System.Type targetType, object? parameter) { }
    }
}
namespace Orc.Wizard
{
    public class DefaultNavigationController : Orc.Wizard.INavigationController
    {
        protected readonly Catel.Services.ILanguageService _languageService;
        protected readonly Catel.Services.IMessageService _messageService;
        public DefaultNavigationController(Orc.Wizard.IWizard wizard, Catel.Services.ILanguageService languageService, Catel.Services.IMessageService messageService) { }
        public Orc.Wizard.IWizard Wizard { get; }
        protected virtual Orc.Wizard.WizardNavigationButton CreateBackButton(Orc.Wizard.IWizard wizard) { }
        protected virtual Orc.Wizard.WizardNavigationButton CreateCancelButton(Orc.Wizard.IWizard wizard) { }
        protected virtual Orc.Wizard.WizardNavigationButton CreateFinishButton(Orc.Wizard.IWizard wizard) { }
        protected virtual Orc.Wizard.WizardNavigationButton CreateForwardButton(Orc.Wizard.IWizard wizard) { }
        protected virtual System.Collections.Generic.IEnumerable<Orc.Wizard.IWizardNavigationButton> CreateNavigationButtons(Orc.Wizard.IWizard wizard) { }
        public void EvaluateNavigationCommands() { }
        public System.Collections.Generic.IEnumerable<Orc.Wizard.IWizardNavigationButton> GetNavigationButtons() { }
    }
    public class DefaultNavigationStrategy : Orc.Wizard.INavigationStrategy
    {
        public DefaultNavigationStrategy() { }
        public int GetIndexOfNextPage(Orc.Wizard.IWizard wizard) { }
        public int GetIndexOfPreviousPage(Orc.Wizard.IWizard wizard) { }
    }
    public class FastForwardNavigationController : Orc.Wizard.DefaultNavigationController
    {
        public FastForwardNavigationController(Orc.Wizard.IWizard wizard, Catel.Services.ILanguageService languageService, Catel.Services.IMessageService messageService) { }
        protected override Orc.Wizard.WizardNavigationButton CreateFinishButton(Orc.Wizard.IWizard wizard) { }
        protected override System.Collections.Generic.IEnumerable<Orc.Wizard.IWizardNavigationButton> CreateNavigationButtons(Orc.Wizard.IWizard wizard) { }
    }
    public abstract class FullScreenWizardBase : Orc.Wizard.WizardBase
    {
        public static readonly Catel.Data.IPropertyData HideNavigationSystemProperty;
        protected FullScreenWizardBase(Catel.IoC.ITypeFactory typeFactory) { }
        public bool HideNavigationSystem { get; protected set; }
    }
    public interface INavigationController
    {
        void EvaluateNavigationCommands();
        System.Collections.Generic.IEnumerable<Orc.Wizard.IWizardNavigationButton> GetNavigationButtons();
    }
    public interface INavigationStrategy
    {
        int GetIndexOfNextPage(Orc.Wizard.IWizard wizard);
        int GetIndexOfPreviousPage(Orc.Wizard.IWizard wizard);
    }
    public interface ISummaryItem
    {
        Orc.Wizard.IWizardPage? Page { get; set; }
        string? Summary { get; set; }
        string? Title { get; set; }
    }
    public interface IWizard
    {
        bool AllowQuickNavigation { get; }
        bool AutoSizeSideNavigationPane { get; set; }
        bool CacheViews { get; }
        bool CanCancel { get; }
        bool CanMoveBack { get; }
        bool CanMoveForward { get; }
        bool CanResume { get; }
        bool CanShowHelp { get; }
        Orc.Wizard.IWizardPage? CurrentPage { get; }
        bool HandleNavigationStates { get; }
        bool IsHelpVisible { get; }
        System.Windows.Size MaxSize { get; }
        System.Windows.Size MinSize { get; }
        Orc.Wizard.INavigationController NavigationController { get; }
        Orc.Wizard.INavigationStrategy NavigationStrategy { get; }
        System.Collections.Generic.IEnumerable<Orc.Wizard.IWizardPage> Pages { get; }
        System.Windows.ResizeMode ResizeMode { get; }
        bool RestoreScrollPositionPerPage { get; }
        bool ShowInTaskbar { get; }
        string? Title { get; }
        event System.EventHandler<System.EventArgs>? Canceled;
        event System.EventHandler<System.EventArgs>? CurrentPageChanged;
        event System.EventHandler<System.EventArgs>? HelpShown;
        event System.EventHandler<System.EventArgs>? MovedBack;
        event System.EventHandler<System.EventArgs>? MovedForward;
        event System.EventHandler<Orc.Wizard.NavigatingEventArgs>? MovingBack;
        event System.EventHandler<Orc.Wizard.NavigatingEventArgs>? MovingForward;
        event System.EventHandler<Orc.Wizard.WizardPageEventArgs>? PageAdded;
        event System.EventHandler<Orc.Wizard.WizardPageEventArgs>? PageRemoved;
        event System.EventHandler<System.EventArgs>? Resumed;
        System.Threading.Tasks.Task CancelAsync();
        System.Threading.Tasks.Task CloseAsync();
        Catel.Data.IValidationContext GetValidationContextForCurrentPage(bool validate = true);
        System.Threading.Tasks.Task InitializeAsync();
        void InsertPage(int index, Orc.Wizard.IWizardPage page);
        System.Threading.Tasks.Task MoveBackAsync();
        System.Threading.Tasks.Task MoveForwardAsync();
        System.Threading.Tasks.Task MoveToPageAsync(int indexOfNextPage);
        void RemovePage(Orc.Wizard.IWizardPage page);
        System.Threading.Tasks.Task ResumeAsync();
        System.Threading.Tasks.Task ShowHelpAsync();
    }
    public static class IWizardExtensions
    {
        public static Orc.Wizard.IWizardPage AddPage(this Orc.Wizard.IWizard wizard, Orc.Wizard.IWizardPage page) { }
        public static TWizardPage AddPage<TWizardPage>(this Orc.Wizard.IWizard wizard)
            where TWizardPage : Orc.Wizard.IWizardPage { }
        public static TWizardPage AddPage<TWizardPage>(this Orc.Wizard.IWizard wizard, object model)
            where TWizardPage : Orc.Wizard.IWizardPage { }
        public static Orc.Wizard.IWizardPage? FindPage(this Orc.Wizard.IWizard wizard, System.Func<Orc.Wizard.IWizardPage, bool> predicate) { }
        public static TWizardPage? FindPageByType<TWizardPage>(this Orc.Wizard.IWizard wizard)
            where TWizardPage : Orc.Wizard.IWizardPage { }
        public static TWizardPage InsertPage<TWizardPage>(this Orc.Wizard.IWizard wizard, int index)
            where TWizardPage : Orc.Wizard.IWizardPage { }
        public static TWizardPage InsertPage<TWizardPage>(this Orc.Wizard.IWizard wizard, int index, object model)
            where TWizardPage : Orc.Wizard.IWizardPage { }
        public static bool IsFirstPage(this Orc.Wizard.IWizard wizard, Orc.Wizard.IWizardPage? wizardPage = null) { }
        public static bool IsLastPage(this Orc.Wizard.IWizard wizard, Orc.Wizard.IWizardPage? wizardPage = null) { }
        public static System.Threading.Tasks.Task MoveForwardOrResumeAsync(this Orc.Wizard.IWizard wizard) { }
        public static System.Threading.Tasks.Task MoveToPageAsync(this Orc.Wizard.IWizard wizard, Orc.Wizard.IWizardPage wizardPage) { }
    }
    public interface IWizardNavigationButton
    {
        System.Windows.Input.ICommand? Command { get; }
        string? Content { get; }
        bool IsVisible { get; }
        System.Windows.Style? Style { get; }
        void Update();
    }
    public interface IWizardPage
    {
        string? BreadcrumbTitle { get; set; }
        string? Description { get; set; }
        bool IsOptional { get; }
        bool IsVisited { get; set; }
        int Number { get; set; }
        string? Title { get; set; }
        Catel.MVVM.IViewModel? ViewModel { get; set; }
        Orc.Wizard.IWizard? Wizard { get; set; }
        event System.EventHandler<Orc.Wizard.ViewModelChangedEventArgs>? ViewModelChanged;
        System.Threading.Tasks.Task AfterWizardPagesSavedAsync();
        System.Threading.Tasks.Task CancelAsync();
        Orc.Wizard.ISummaryItem? GetSummary();
        System.Threading.Tasks.Task InitializeAsync();
        System.Threading.Tasks.Task SaveAsync();
    }
    public static class IWizardPageExtensions
    {
        public static System.Threading.Tasks.Task MoveForwardOrResumeAsync(this Orc.Wizard.IWizardPage wizardPage) { }
    }
    public interface IWizardPageViewModel : Catel.Data.IValidatable, Catel.MVVM.IViewModel, System.ComponentModel.IDataErrorInfo, System.ComponentModel.IDataWarningInfo, System.ComponentModel.INotifyDataErrorInfo, System.ComponentModel.INotifyDataWarningInfo, System.ComponentModel.INotifyPropertyChanged
    {
        void EnableValidationExposure();
    }
    public interface IWizardPageViewModelLocator : Catel.MVVM.ILocator, Catel.MVVM.IViewModelLocator { }
    public interface IWizardService
    {
        System.Threading.Tasks.Task<Catel.Services.UIVisualizerResult> ShowWizardAsync(Orc.Wizard.IWizard wizard);
    }
    public static class IWizardServiceExtensions
    {
        public static System.Threading.Tasks.Task<Catel.Services.UIVisualizerResult> ShowWizardAsync<TWizard>(this Orc.Wizard.IWizardService wizardService, object? model = null)
            where TWizard : Orc.Wizard.IWizard { }
    }
    public class LibraryThemeProvider : ControlzEx.Theming.LibraryThemeProvider
    {
        public LibraryThemeProvider() { }
        public override void FillColorSchemeValues(System.Collections.Generic.Dictionary<string, string> values, ControlzEx.Theming.RuntimeThemeColorValues colorValues) { }
    }
    public static class ListBoxExtensions
    {
        public static readonly System.Windows.DependencyProperty HorizontalOffsetProperty;
        public static void CenterSelectedItem(this System.Windows.Controls.ListBox listBox) { }
        public static double GetHorizontalOffset(System.Windows.FrameworkElement target) { }
        public static void SetHorizontalOffset(System.Windows.FrameworkElement target, double value) { }
    }
    public static class ModuleInitializer
    {
        public static void Initialize() { }
    }
    public class NavigatingEventArgs : System.EventArgs
    {
        public NavigatingEventArgs(Orc.Wizard.IWizardPage? from, Orc.Wizard.IWizardPage? to) { }
        public bool Cancel { get; set; }
        public Orc.Wizard.IWizardPage? From { get; }
        public Orc.Wizard.IWizardPage? To { get; }
    }
    public static class ProgressBarExtensions
    {
        public static readonly System.Windows.DependencyProperty SmoothProgressProperty;
        public static double GetSmoothProgress(System.Windows.FrameworkElement target) { }
        public static void SetSmoothProgress(System.Windows.FrameworkElement target, double value) { }
        public static void UpdateProgress(this System.Windows.Controls.ProgressBar progressBar, int currentItem, int totalItems) { }
    }
    public abstract class SideNavigationWizardBase : Orc.Wizard.WizardBase
    {
        public static readonly Catel.Data.IPropertyData ShowFullScreenProperty;
        protected SideNavigationWizardBase(Catel.IoC.ITypeFactory typeFactory) { }
        public bool ShowFullScreen { get; set; }
    }
    public class SummaryItem : Orc.Wizard.ISummaryItem
    {
        public SummaryItem() { }
        public Orc.Wizard.IWizardPage? Page { get; set; }
        public string? Summary { get; set; }
        public string? Title { get; set; }
    }
    public class SummaryWizardPage : Orc.Wizard.WizardPageBase
    {
        public SummaryWizardPage(Catel.Services.ILanguageService languageService) { }
    }
    public static class ThemingKeys
    {
        public const string AccentColor = "Orc.Colors.AccentColor";
        public const string AccentColor40 = "Orc.Colors.AccentColor40";
        public const string AccentColorBrush = "Orc.Brushes.AccentColorBrush";
        public const string AccentColorBrush40 = "Orc.Brushes.AccentColorBrush40";
    }
    public class ViewModelChangedEventArgs : System.EventArgs
    {
        public ViewModelChangedEventArgs(Catel.MVVM.IViewModel? oldViewModel, Catel.MVVM.IViewModel? newViewModel) { }
        public Catel.MVVM.IViewModel? NewViewModel { get; }
        public Catel.MVVM.IViewModel? OldViewModel { get; }
    }
    public abstract class WizardBase : Catel.Data.ModelBase, Orc.Wizard.IWizard
    {
        protected readonly Catel.IoC.ITypeFactory _typeFactory;
        public static readonly Catel.Data.IPropertyData AllowQuickNavigationProperty;
        public static readonly Catel.Data.IPropertyData AutoSizeSideNavigationPaneProperty;
        public static readonly Catel.Data.IPropertyData CacheViewsProperty;
        public static readonly Catel.Data.IPropertyData CanShowHelpProperty;
        public static readonly Catel.Data.IPropertyData HandleNavigationStatesProperty;
        public static readonly Catel.Data.IPropertyData HorizontalScrollbarVisibilityProperty;
        public static readonly Catel.Data.IPropertyData IsHelpVisibleProperty;
        public static readonly Catel.Data.IPropertyData MaxSizeProperty;
        public static readonly Catel.Data.IPropertyData MinSizeProperty;
        public static readonly Catel.Data.IPropertyData ResizeModeProperty;
        public static readonly Catel.Data.IPropertyData RestoreScrollPositionPerPageProperty;
        public static readonly Catel.Data.IPropertyData ShowInTaskbarProperty;
        public static readonly Catel.Data.IPropertyData TitleProperty;
        public static readonly Catel.Data.IPropertyData VerticalScrollbarVisibilityProperty;
        protected WizardBase(Catel.IoC.ITypeFactory typeFactory) { }
        public bool AllowQuickNavigation { get; protected set; }
        public bool AutoSizeSideNavigationPane { get; set; }
        public virtual bool CacheViews { get; protected set; }
        public virtual bool CanCancel { get; }
        public virtual bool CanMoveBack { get; }
        public virtual bool CanMoveForward { get; }
        public virtual bool CanResume { get; }
        public bool CanShowHelp { get; protected set; }
        public Orc.Wizard.IWizardPage? CurrentPage { get; }
        public virtual bool HandleNavigationStates { get; protected set; }
        public virtual System.Windows.Controls.ScrollBarVisibility HorizontalScrollbarVisibility { get; protected set; }
        public bool IsHelpVisible { get; protected set; }
        public virtual System.Windows.Size MaxSize { get; protected set; }
        public virtual System.Windows.Size MinSize { get; protected set; }
        public Orc.Wizard.INavigationController NavigationController { get; protected set; }
        public Orc.Wizard.INavigationStrategy NavigationStrategy { get; protected set; }
        public System.Collections.Generic.IEnumerable<Orc.Wizard.IWizardPage> Pages { get; }
        public virtual System.Windows.ResizeMode ResizeMode { get; protected set; }
        public virtual bool RestoreScrollPositionPerPage { get; protected set; }
        public bool ShowInTaskbar { get; protected set; }
        public string? Title { get; protected set; }
        public virtual System.Windows.Controls.ScrollBarVisibility VerticalScrollbarVisibility { get; protected set; }
        public event System.EventHandler<System.EventArgs>? Canceled;
        public event System.EventHandler<System.EventArgs>? CurrentPageChanged;
        public event System.EventHandler<System.EventArgs>? HelpShown;
        public event System.EventHandler<System.EventArgs>? MovedBack;
        public event System.EventHandler<System.EventArgs>? MovedForward;
        public event System.EventHandler<Orc.Wizard.NavigatingEventArgs>? MovingBack;
        public event System.EventHandler<Orc.Wizard.NavigatingEventArgs>? MovingForward;
        public event System.EventHandler<Orc.Wizard.WizardPageEventArgs>? PageAdded;
        public event System.EventHandler<Orc.Wizard.WizardPageEventArgs>? PageRemoved;
        public event System.EventHandler<System.EventArgs>? Resumed;
        public virtual System.Threading.Tasks.Task CancelAsync() { }
        public virtual System.Threading.Tasks.Task CloseAsync() { }
        public virtual Catel.Data.IValidationContext GetValidationContext(Orc.Wizard.IWizardPage wizardPage, bool validate = true) { }
        public virtual Catel.Data.IValidationContext GetValidationContextForCurrentPage(bool validate = true) { }
        public virtual System.Threading.Tasks.Task InitializeAsync() { }
        public void InsertPage(int index, Orc.Wizard.IWizardPage page) { }
        public virtual System.Threading.Tasks.Task MoveBackAsync() { }
        public virtual System.Threading.Tasks.Task MoveForwardAsync() { }
        public virtual System.Threading.Tasks.Task MoveToPageAsync(int indexOfNextPage) { }
        protected virtual void OnMovedBack() { }
        protected virtual void OnMovedForward() { }
        protected virtual void OnMovingBack() { }
        protected virtual void OnMovingForward() { }
        protected override void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e) { }
        protected void RaiseCanceled() { }
        protected void RaiseMovedBack() { }
        protected void RaiseMovedForward() { }
        protected bool RaiseMovingBack(Orc.Wizard.IWizardPage? fromPage, Orc.Wizard.IWizardPage? toPage) { }
        protected bool RaiseMovingForward(Orc.Wizard.IWizardPage? fromPage, Orc.Wizard.IWizardPage? toPage) { }
        protected void RaiseResumed() { }
        public void RemovePage(Orc.Wizard.IWizardPage page) { }
        public virtual System.Threading.Tasks.Task ResumeAsync() { }
        protected virtual Orc.Wizard.IWizardPage? SetCurrentPage(int newIndex) { }
        public virtual System.Threading.Tasks.Task ShowHelpAsync() { }
        protected virtual System.Threading.Tasks.Task<bool> ValidateAndSaveCurrentPageAsync() { }
    }
    public static class WizardConfiguration
    {
        public static readonly int CannotNavigate;
        public static System.TimeSpan AnimationDuration { get; set; }
    }
    public class WizardNavigationButton : Catel.Data.ModelBase, Orc.Wizard.IWizardNavigationButton
    {
        public static readonly Catel.Data.IPropertyData? ContentEvaluatorProperty;
        public static readonly Catel.Data.IPropertyData? ContentProperty;
        public static readonly Catel.Data.IPropertyData? IsVisibleEvaluatorProperty;
        public static readonly Catel.Data.IPropertyData? IsVisibleProperty;
        public static readonly Catel.Data.IPropertyData? StyleEvaluatorProperty;
        public static readonly Catel.Data.IPropertyData? StyleProperty;
        public WizardNavigationButton() { }
        public System.Windows.Input.ICommand? Command { get; set; }
        public string? Content { get; set; }
        public System.Func<string?>? ContentEvaluator { get; set; }
        public bool IsVisible { get; set; }
        public System.Func<bool>? IsVisibleEvaluator { get; set; }
        public System.Windows.Style? Style { get; set; }
        public System.Func<Orc.Wizard.IWizardNavigationButton, System.Windows.Style?>? StyleEvaluator { get; set; }
        public void Update() { }
    }
    public abstract class WizardPageBase : Catel.Data.ModelBase, Orc.Wizard.IWizardPage
    {
        public static readonly Catel.Data.IPropertyData? BreadcrumbTitleProperty;
        public static readonly Catel.Data.IPropertyData? DescriptionProperty;
        public static readonly Catel.Data.IPropertyData? IsOptionalProperty;
        public static readonly Catel.Data.IPropertyData? IsVisitedProperty;
        public static readonly Catel.Data.IPropertyData? NumberProperty;
        public static readonly Catel.Data.IPropertyData? TitleProperty;
        protected WizardPageBase() { }
        public string? BreadcrumbTitle { get; set; }
        public string? Description { get; set; }
        public bool IsOptional { get; protected set; }
        public bool IsVisited { get; set; }
        public int Number { get; set; }
        public string? Title { get; set; }
        public Catel.MVVM.IViewModel? ViewModel { get; set; }
        public Orc.Wizard.IWizard? Wizard { get; set; }
        public event System.EventHandler<Orc.Wizard.ViewModelChangedEventArgs>? ViewModelChanged;
        public virtual System.Threading.Tasks.Task AfterWizardPagesSavedAsync() { }
        public virtual System.Threading.Tasks.Task CancelAsync() { }
        public virtual Orc.Wizard.ISummaryItem? GetSummary() { }
        public virtual System.Threading.Tasks.Task InitializeAsync() { }
        public virtual System.Threading.Tasks.Task SaveAsync() { }
    }
    public class WizardPageEventArgs : System.EventArgs
    {
        public WizardPageEventArgs(Orc.Wizard.IWizardPage wizardPage) { }
        public Orc.Wizard.IWizardPage WizardPage { get; }
    }
    public class WizardPageSelectionBehavior : Catel.Windows.Interactivity.BehaviorBase<System.Windows.Controls.ContentControl>
    {
        public static readonly System.Windows.DependencyProperty WizardProperty;
        public WizardPageSelectionBehavior() { }
        public Orc.Wizard.IWizard? Wizard { get; set; }
        protected override void OnAssociatedObjectLoaded() { }
        protected override void OnAssociatedObjectUnloaded() { }
    }
    public class WizardPageViewModelBase<TWizardPage> : Catel.MVVM.ViewModelBase, Catel.Data.IValidatable, Catel.MVVM.IViewModel, Orc.Wizard.IWizardPageViewModel, System.ComponentModel.IDataErrorInfo, System.ComponentModel.IDataWarningInfo, System.ComponentModel.INotifyDataErrorInfo, System.ComponentModel.INotifyDataWarningInfo, System.ComponentModel.INotifyPropertyChanged
        where TWizardPage :  class, Orc.Wizard.IWizardPage
    {
        public static readonly Catel.Data.IPropertyData WizardPageProperty;
        public WizardPageViewModelBase(TWizardPage wizardPage) { }
        public Catel.MVVM.TaskCommand<Orc.Wizard.IWizardPage> QuickNavigateToPage { get; }
        public Orc.Wizard.IWizard? Wizard { get; }
        [Catel.MVVM.Model(SupportIEditableObject=false)]
        public TWizardPage WizardPage { get; }
        public virtual void EnableValidationExposure() { }
        public bool QuickNavigateToPageCanExecute(Orc.Wizard.IWizardPage? parameter) { }
        public System.Threading.Tasks.Task QuickNavigateToPageExecuteAsync(Orc.Wizard.IWizardPage? parameter) { }
    }
    public class WizardPageViewModelLocator : Catel.MVVM.ViewModelLocator, Catel.MVVM.ILocator, Catel.MVVM.IViewModelLocator, Orc.Wizard.IWizardPageViewModelLocator
    {
        public WizardPageViewModelLocator() { }
    }
    public class WizardService : Orc.Wizard.IWizardService
    {
        public WizardService(Catel.Services.IUIVisualizerService uiVisualizerService) { }
        public System.Threading.Tasks.Task<Catel.Services.UIVisualizerResult> ShowWizardAsync(Orc.Wizard.IWizard wizard) { }
    }
}
namespace Orc.Wizard.ViewModels
{
    public class FullScreenWizardViewModel : Orc.Wizard.ViewModels.WizardViewModel
    {
        public FullScreenWizardViewModel(Orc.Wizard.IWizard wizard, Catel.Services.IMessageService messageService, Catel.Services.ILanguageService languageService) { }
    }
    public class SideNavigationWizardViewModel : Orc.Wizard.ViewModels.WizardViewModel
    {
        public SideNavigationWizardViewModel(Orc.Wizard.IWizard wizard, Catel.Services.IMessageService messageService, Catel.Services.ILanguageService languageService) { }
    }
    public class SummaryWizardPageViewModel : Orc.Wizard.WizardPageViewModelBase<Orc.Wizard.SummaryWizardPage>
    {
        public static readonly Catel.Data.IPropertyData SummaryItemsProperty;
        public SummaryWizardPageViewModel(Orc.Wizard.SummaryWizardPage wizardPage) { }
        public System.Collections.Generic.List<Orc.Wizard.ISummaryItem>? SummaryItems { get; }
        protected override System.Threading.Tasks.Task InitializeAsync() { }
    }
    public class WizardViewModel : Catel.MVVM.ViewModelBase
    {
        public static readonly Catel.Data.IPropertyData CurrentPageProperty;
        public static readonly Catel.Data.IPropertyData IsHelpVisibleProperty;
        public static readonly Catel.Data.IPropertyData IsPageOptionalProperty;
        public static readonly Catel.Data.IPropertyData MaxSizeProperty;
        public static readonly Catel.Data.IPropertyData MinSizeProperty;
        public static readonly Catel.Data.IPropertyData PageDescriptionProperty;
        public static readonly Catel.Data.IPropertyData PageTitleProperty;
        public static readonly Catel.Data.IPropertyData ResizeModeProperty;
        public static readonly Catel.Data.IPropertyData ShowInTaskbarProperty;
        public static readonly Catel.Data.IPropertyData WizardButtonsProperty;
        public static readonly Catel.Data.IPropertyData WizardPagesProperty;
        public static readonly Catel.Data.IPropertyData WizardProperty;
        public WizardViewModel(Orc.Wizard.IWizard wizard, Catel.Services.IMessageService messageService, Catel.Services.ILanguageService languageService) { }
        [Catel.MVVM.ViewModelToModel("Wizard", "CurrentPage")]
        public Orc.Wizard.IWizardPage CurrentPage { get; set; }
        [Catel.MVVM.ViewModelToModel("Wizard", "IsHelpVisible")]
        public bool IsHelpVisible { get; set; }
        public bool IsPageOptional { get; }
        [Catel.MVVM.ViewModelToModel("Wizard", "MaxSize")]
        public System.Windows.Size MaxSize { get; set; }
        [Catel.MVVM.ViewModelToModel("Wizard", "MinSize")]
        public System.Windows.Size MinSize { get; set; }
        public string? PageDescription { get; }
        public string? PageTitle { get; }
        [Catel.MVVM.ViewModelToModel("Wizard", "ResizeMode")]
        public System.Windows.ResizeMode ResizeMode { get; set; }
        public Catel.MVVM.TaskCommand ShowHelp { get; set; }
        [Catel.MVVM.ViewModelToModel("Wizard", "ShowInTaskbar")]
        public bool ShowInTaskbar { get; set; }
        [Catel.MVVM.Model(SupportIEditableObject=false)]
        public Orc.Wizard.IWizard Wizard { get; set; }
        public System.Collections.Generic.IEnumerable<Orc.Wizard.IWizardNavigationButton>? WizardButtons { get; }
        public System.Collections.Generic.IEnumerable<Orc.Wizard.IWizardPage>? WizardPages { get; }
        protected override System.Threading.Tasks.Task<bool> CancelAsync() { }
        protected override System.Threading.Tasks.Task CloseAsync() { }
        protected override System.Threading.Tasks.Task InitializeAsync() { }
        public Orc.Wizard.IWizardPage get_CurrentPage() { }
        public bool get_IsHelpVisible() { }
        public System.Windows.Size get_MaxSize() { }
        public System.Windows.Size get_MinSize() { }
        public System.Windows.ResizeMode get_ResizeMode() { }
        public bool get_ShowInTaskbar() { }
        public void set_CurrentPage(Orc.Wizard.IWizardPage ) { }
        public void set_IsHelpVisible(bool ) { }
        public void set_MaxSize(System.Windows.Size ) { }
        public void set_MinSize(System.Windows.Size ) { }
        public void set_ResizeMode(System.Windows.ResizeMode ) { }
        public void set_ShowInTaskbar(bool ) { }
    }
}
namespace Orc.Wizard.Views
{
    public class FullScreenWizardWindow : Catel.Windows.DataWindow, System.Windows.Markup.IComponentConnector
    {
        public FullScreenWizardWindow() { }
        public FullScreenWizardWindow(Orc.Wizard.ViewModels.FullScreenWizardViewModel? viewModel) { }
        public void InitializeComponent() { }
        protected override void OnLoaded(System.EventArgs e) { }
        protected override void OnViewModelPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e) { }
    }
    public class SideNavigationWizardWindow : Catel.Windows.DataWindow, System.Windows.Markup.IComponentConnector
    {
        public SideNavigationWizardWindow() { }
        public SideNavigationWizardWindow(Orc.Wizard.ViewModels.SideNavigationWizardViewModel? viewModel) { }
        public void InitializeComponent() { }
        protected override void OnLoaded(System.EventArgs e) { }
        protected override void OnViewModelChanged() { }
        protected override void OnViewModelPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e) { }
    }
    public class SummaryWizardPageView : Catel.Windows.Controls.UserControl, System.Windows.Markup.IComponentConnector
    {
        public SummaryWizardPageView() { }
        public void InitializeComponent() { }
    }
    public class WizardWindow : Catel.Windows.DataWindow, System.Windows.Markup.IComponentConnector
    {
        public WizardWindow() { }
        public WizardWindow(Orc.Wizard.ViewModels.WizardViewModel? viewModel) { }
        public void InitializeComponent() { }
        protected override void OnLoaded(System.EventArgs e) { }
        protected override void OnViewModelPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e) { }
    }
}